pip install yfinance pandas matplotlib statsmodels keras tensorflow

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
import numpy as np

# **Step 1: Fetch Historical Stock Data**
def fetch_stock_data(ticker, period):
    data = yf.Ticker(ticker)
    return data.history(period=period)

# **Step 2: Analyze and Prepare Data**
def prepare_data(df, forecast_out=30, train_test_split=0.8):
    # Convert data to dataframe if not already
    df = pd.DataFrame(df)
    
    # Create a new column with the future prediction target
    df['Prediction'] = df[['Close']].shift(-forecast_out)
    
    # Create a new dataframe with only the relevant data
    X = df[['Open', 'High', 'Low', 'Close', 'Volume']]
    y = df['Prediction']
    
    # Prepare training and testing sets
    split_index = int(len(df) * train_test_split)
    X_train, X_test = X[:split_index], X[split_index:-forecast_out]
    y_train, y_test = y[:split_index], y[split_index:-forecast_out]
    
    # Reshape for LSTM
    X_train_lstm = np.reshape(X_train.values, (X_train.shape[0], X_train.shape[1], 1))
    X_test_lstm = np.reshape(X_test.values, (X_test.shape[0], X_test.shape[1], 1))
    
    return X_train, X_test, y_train, y_test, X_train_lstm, X_test_lstm

# **Step 3: ARIMA Model**
def arima_model(train, test):
    model = ARIMA(train, order=(5,1,0))  
    model_fit = model.fit()
    predictions = model_fit.predict(start=len(train), end=len(train)+len(test)-1, typ='levels')
    return predictions

# **Step 4: LSTM Model**
def lstm_model(X_train, X_test, y_train, y_test):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
    model.add(LSTM(units=50))
    model.add(Dropout(0.2))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(X_train, y_train, epochs=1, batch_size=1, verbose=2)
    predictions = model.predict(X_test)
    return predictions

# **Execution**
if __name__ == "__main__":
    ticker = "AAPL"  # Apple Inc.
    period = "1y"   # Period of data to fetch
    
    # Fetch Data
    data = fetch_stock_data(ticker, period)
    
    # Prepare Data
    X_train, X_test, y_train, y_test, X_train_lstm, X_test_lstm = prepare_data(data)
    
    # ARIMA Prediction
    arima_preds = arima_model(y_train, y_test)
    print("ARIMA MSE: ", mean_squared_error(y_test, arima_preds))
    
    # LSTM Prediction
    lstm_preds = lstm_model(X_train_lstm, X_test_lstm, y_train, y_test)
    print("LSTM MSE: ", mean_squared_error(y_test, lstm_preds))
    
    # **Visualization (Simplified for demonstration)**
    plt.figure(figsize=(10,6))
    plt.plot(y_test, label='Actual', color='blue')
    plt.plot(arima_preds, label='ARIMA Predictions', color='red')
    plt.plot(lstm_preds, label='LSTM Predictions', color='green')
    plt.legend(loc='best')
    plt.show()
